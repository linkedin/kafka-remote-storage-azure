plugins {
  id "java"
  id "idea"
  id 'jacoco'
  id "checkstyle"
  id "com.github.johnrengelman.shadow" version "7.1.2"
  id "maven-publish"
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(11)
  }
}

test {
  finalizedBy jacocoTestReport // report is always generated after tests run
}

dependencies {
  implementation "com.azure:azure-identity:${depVersions.azureIdentity}"
  implementation "com.azure:azure-storage-blob:${depVersions.azureBlobStorage}"
  implementation "org.apache.kafka:kafka-clients:${depVersions.kafka}"
  implementation "org.apache.kafka:kafka-storage:${depVersions.kafka}"
  implementation "org.apache.kafka:kafka-storage-api:${depVersions.kafka}"
  implementation "io.dropwizard.metrics:metrics-core:${depVersions.dropwizardMetrics}"
  implementation "com.github.ben-manes.caffeine:caffeine:${depVersions.caffeine}"

  // Tests use slf4j logging api with log4j2 backend.
  // log4j-slf4j-impl initializes the logging system with properties in log4j2.xml
  // Also prevent slf4j runtime warning: Failed to load class org.slf4j.impl.StaticLoggerBinder
  implementation "org.slf4j:slf4j-api:${depVersions.slf4jApi}"
  runtimeOnly "org.apache.logging.log4j:log4j-core:${depVersions.log4j}"
  runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:${depVersions.log4j}"

  testImplementation "org.junit.jupiter:junit-jupiter-api:${depVersions.junitJupiter}"
  testImplementation "org.junit.jupiter:junit-jupiter-params:${depVersions.junitJupiter}"
  testImplementation "org.mockito:mockito-junit-jupiter:${depVersions.mockitoJunitJupiter}"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${depVersions.junitJupiter}"
}

// This task creates the jar file to be loaded with kafka-server 3.0.
// Note that this task excludes kafka, slf4j and log4j dependencies from the jar
// as they are provided by kafka-server proper. The artifact will have '-all' as a suffix,
// indicating that it is a fat JAR, and to keep the option of having
// a lean JAR in the future open.
shadowJar {
  archiveClassifier = 'shadow'
  dependencies {
    exclude(dependency("org.apache.kafka:kafka-server-common"))
    exclude(dependency("org.apache.kafka:kafka-storage"))
    exclude(dependency("org.apache.kafka:kafka-storage-api"))
    exclude(dependency("org.apache.kafka:kafka-clients"))

    exclude(dependency("org.apache.logging.log4j:log4j-core"))
    exclude(dependency("org.apache.logging.log4j:log4j-api"))
    exclude(dependency("org.slf4j:slf4j-api"))
    exclude(dependency("org.apache.logging.log4j:log4j-slf4j-impl"))
  }
  from "$rootDir/LICENSE"
  from "$rootDir/NOTICE"
}
assemble.dependsOn(shadowJar)

ext {
  jfrogUsername = System.getenv('JFROG_USERNAME')
  jfrogApiKey = System.getenv('JFROG_API_KEY')

  // By default, publish to JFrog.
  mavenUrl = project.hasProperty('mavenUrl') ? project.mavenUrl : jfrogRepoUrl
  mavenUsername = project.hasProperty('mavenUsername') ? project.mavenUsername : jfrogUsername
  mavenPassword = project.hasProperty('mavenPassword') ? project.mavenPassword : jfrogApiKey
}

publishing {
  repositories {
    // To test locally, invoke gradlew with `-PmavenUrl=file:///some/local/path`
    maven {
      url = mavenUrl
      credentials {
        username = mavenUsername
        password = mavenPassword
      }
    }
  }

  publications {
    shadow(MavenPublication) { publication ->
      // default groupId is picked up from project's group,
      // default artifactId is project.name
      // version is project.version (semantic versioning)
      project.shadow.component(publication)
      pom.withXml {
        def root = asNode()
        root.appendNode('name', 'kafka-azure-rsm')
        root.appendNode('description', 'Kafka Remote Storage Manager that uses Azure Blob Storage as remote storage backend.')
        root.children().last() + rootProject.ext.pomConfig
      }
    }
  }
}
publish.dependsOn(assemble)
publishToMavenLocal.dependsOn(assemble)
task('install') {
  dependsOn(publishToMavenLocal)
}

test {
  useJUnitPlatform()
}
